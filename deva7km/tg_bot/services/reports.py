from datetime import datetime
from aiogram.utils.markdown import hbold
from catalog.models import Sale, Return
from asgiref.sync import sync_to_async
from collections import defaultdict


#  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –¥–µ–Ω—å
@sync_to_async
def generate_sales_report_by_day():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    sales = Sale.objects.filter(created_at__date=today)
    returns = Return.objects.filter(created_at__date=today)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—ã
    total_sales_amount = 0
    total_returns_amount = 0
    total_cash_sales_amount = 0
    total_non_cash_sales_amount = 0

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    sales_by_items = defaultdict(list)
    returns_by_items = defaultdict(list)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂
    for sale in sales:
        sale_amount = float(sale.calculate_total_amount().split()[0])
        total_sales_amount += sale_amount

        if sale.payment_method == 'cash':
            total_cash_sales_amount += sale_amount
        elif sale.payment_method == 'non_cash':
            total_non_cash_sales_amount += sale_amount

        for item in sale.items.all():
            sales_by_items[item.product_modification].append(item)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    for ret in returns:
        return_amount = float(ret.calculate_total_amount().split()[0])
        total_returns_amount += return_amount

        for item in ret.items.all():
            returns_by_items[item.product_modification].append(item)

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    report_str = hbold("‚úÖ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    for product_modification, items in sales_by_items.items():
        report_str += f"‚û°Ô∏è {product_modification.product.title}-{product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç.)\n"

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    report_str += hbold("\n–í–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    for product_modification, items in returns_by_items.items():
        report_str += f"‚¨ÖÔ∏è {product_modification.product.title}-{product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç.)\n"

    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Å—É–º–º—ã
    report_str += (f"\n{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂')}: {total_sales_amount:.2f} UAH (–Ω–∞–ª.: {total_cash_sales_amount:.2f}"
                   f" UAH, –±–µ–∑–Ω–∞–ª.: {total_non_cash_sales_amount:.2f} UAH)\n")
    report_str += f"{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')}: {total_returns_amount:.2f} UAH\n\n"
    report_str += f"{hbold('üíµ –ß–∏—Å—Ç–∞—è –∫–∞—Å—Å–∞')}: {total_cash_sales_amount - total_returns_amount:.2f} UAH"

    return report_str
