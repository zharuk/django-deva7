from datetime import timedelta
from aiogram.utils.markdown import hbold
from catalog.models import Sale, Return, Product, ProductModification
from asgiref.sync import sync_to_async
from collections import defaultdict
from datetime import datetime


@sync_to_async
def generate_sales_report_by_day() -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    sales = Sale.objects.filter(created_at__date=today)
    returns = Return.objects.filter(created_at__date=today)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—ã
    total_sales_amount = 0
    total_returns_amount = 0
    total_cash_sales_amount = 0
    total_non_cash_sales_amount = 0

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    sales_by_items = defaultdict(list)
    returns_by_items = defaultdict(list)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂
    for sale in sales:
        sale_amount = float(sale.calculate_total_amount().split()[0])
        total_sales_amount += sale_amount

        if sale.payment_method == 'cash':
            total_cash_sales_amount += sale_amount
        elif sale.payment_method == 'non_cash':
            total_non_cash_sales_amount += sale_amount

        for item in sale.items.all():
            sales_by_items[item.product_modification].append(item)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    for ret in returns:
        return_amount = float(ret.calculate_total_amount().split()[0])
        total_returns_amount += return_amount

        for item in ret.items.all():
            returns_by_items[item.product_modification].append(item)

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    report_str = hbold("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(sales_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    report_str += hbold("\n–í–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(returns_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Å—É–º–º—ã
    report_str += (f"\n{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂')}: {total_sales_amount:.2f} UAH (–Ω–∞–ª.: {total_cash_sales_amount:.2f}"
                   f" UAH, –±–µ–∑–Ω–∞–ª.: {total_non_cash_sales_amount:.2f} UAH)\n")
    report_str += f"{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')}: {total_returns_amount:.2f} UAH\n\n"
    report_str += f"{hbold('üíµ –ß–∏—Å—Ç–∞—è –∫–∞—Å—Å–∞')}: {(total_cash_sales_amount + total_non_cash_sales_amount) - total_returns_amount:.2f} UAH"

    return report_str


@sync_to_async
def generate_sales_report_by_yesterday() -> str:
    # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
    yesterday = datetime.now().date() - timedelta(days=1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ –≤—á–µ—Ä–∞
    sales = Sale.objects.filter(created_at__date=yesterday)
    returns = Return.objects.filter(created_at__date=yesterday)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—ã
    total_sales_amount = 0
    total_returns_amount = 0
    total_cash_sales_amount = 0
    total_non_cash_sales_amount = 0

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    sales_by_items = defaultdict(list)
    returns_by_items = defaultdict(list)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂
    for sale in sales:
        sale_amount = float(sale.calculate_total_amount().split()[0])
        total_sales_amount += sale_amount

        if sale.payment_method == 'cash':
            total_cash_sales_amount += sale_amount
        elif sale.payment_method == 'non_cash':
            total_non_cash_sales_amount += sale_amount

        for item in sale.items.all():
            sales_by_items[item.product_modification].append(item)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    for ret in returns:
        return_amount = float(ret.calculate_total_amount().split()[0])
        total_returns_amount += return_amount

        for item in ret.items.all():
            returns_by_items[item.product_modification].append(item)

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    report_str = hbold("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –≤—á–µ—Ä–∞\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(sales_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    report_str += hbold("\n–í–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ –≤—á–µ—Ä–∞\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(returns_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Å—É–º–º—ã
    report_str += (f"\n{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂')}: {total_sales_amount:.2f} UAH (–Ω–∞–ª.: {total_cash_sales_amount:.2f}"
                   f" UAH, –±–µ–∑–Ω–∞–ª.: {total_non_cash_sales_amount:.2f} UAH)\n")
    report_str += f"{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')}: {total_returns_amount:.2f} UAH\n\n"
    report_str += f"{hbold('üíµ –ß–∏—Å—Ç–∞—è –∫–∞—Å—Å–∞')}: {(total_cash_sales_amount + total_non_cash_sales_amount) - total_returns_amount:.2f} UAH"

    return report_str


#  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
@sync_to_async
def generate_sales_report_by_week() -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    start_of_week = today - timedelta(days=today.weekday())

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    sales = Sale.objects.filter(created_at__date__range=[start_of_week, today])
    returns = Return.objects.filter(created_at__date__range=[start_of_week, today])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—ã
    total_sales_amount = 0
    total_returns_amount = 0
    total_cash_sales_amount = 0
    total_non_cash_sales_amount = 0

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    sales_by_items = defaultdict(list)
    returns_by_items = defaultdict(list)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂
    for sale in sales:
        sale_amount = float(sale.calculate_total_amount().split()[0])
        total_sales_amount += sale_amount

        if sale.payment_method == 'cash':
            total_cash_sales_amount += sale_amount
        elif sale.payment_method == 'non_cash':
            total_non_cash_sales_amount += sale_amount

        for item in sale.items.all():
            sales_by_items[item.product_modification].append(item)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    for ret in returns:
        return_amount = float(ret.calculate_total_amount().split()[0])
        total_returns_amount += return_amount

        for item in ret.items.all():
            returns_by_items[item.product_modification].append(item)

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    report_str = hbold("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(sales_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    report_str += hbold("\n–í–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(returns_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Å—É–º–º—ã
    report_str += (f"\n{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂')}: {total_sales_amount:.2f} UAH (–Ω–∞–ª.: {total_cash_sales_amount:.2f}"
                   f" UAH, –±–µ–∑–Ω–∞–ª.: {total_non_cash_sales_amount:.2f} UAH)\n")
    report_str += f"{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')}: {total_returns_amount:.2f} UAH\n\n"
    report_str += f"{hbold('üíµ –ß–∏—Å—Ç–∞—è –∫–∞—Å—Å–∞')}: {(total_cash_sales_amount + total_non_cash_sales_amount) - total_returns_amount:.2f} UAH"

    return report_str


#  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –º–µ—Å—è—Ü
@sync_to_async
def generate_sales_report_by_month() -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    first_day_of_month = today.replace(day=1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    sales = Sale.objects.filter(created_at__date__range=[first_day_of_month, today])
    returns = Return.objects.filter(created_at__date__range=[first_day_of_month, today])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—ã
    total_sales_amount = 0
    total_returns_amount = 0
    total_cash_sales_amount = 0
    total_non_cash_sales_amount = 0

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    sales_by_items = defaultdict(list)
    returns_by_items = defaultdict(list)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂
    for sale in sales:
        sale_amount = float(sale.calculate_total_amount().split()[0])
        total_sales_amount += sale_amount

        if sale.payment_method == 'cash':
            total_cash_sales_amount += sale_amount
        elif sale.payment_method == 'non_cash':
            total_non_cash_sales_amount += sale_amount

        for item in sale.items.all():
            sales_by_items[item.product_modification].append(item)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    for ret in returns:
        return_amount = float(ret.calculate_total_amount().split()[0])
        total_returns_amount += return_amount

        for item in ret.items.all():
            returns_by_items[item.product_modification].append(item)

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    report_str = hbold("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(sales_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    report_str += hbold("\n–í–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(returns_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Å—É–º–º—ã
    report_str += (f"\n{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂')}: {total_sales_amount:.2f} UAH (–Ω–∞–ª.: {total_cash_sales_amount:.2f}"
                   f" UAH, –±–µ–∑–Ω–∞–ª.: {total_non_cash_sales_amount:.2f} UAH)\n")
    report_str += f"{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')}: {total_returns_amount:.2f} UAH\n\n"
    report_str += f"{hbold('üíµ –ß–∏—Å—Ç–∞—è –∫–∞—Å—Å–∞')}: {(total_cash_sales_amount + total_non_cash_sales_amount) - total_returns_amount:.2f} UAH"

    return report_str


#  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –≥–æ–¥
@sync_to_async
def generate_sales_report_by_year() -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    first_day_of_year = today.replace(month=1, day=1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    sales = Sale.objects.filter(created_at__date__range=[first_day_of_year, today])
    returns = Return.objects.filter(created_at__date__range=[first_day_of_year, today])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—ã
    total_sales_amount = 0
    total_returns_amount = 0
    total_cash_sales_amount = 0
    total_non_cash_sales_amount = 0

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    sales_by_items = defaultdict(list)
    returns_by_items = defaultdict(list)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂
    for sale in sales:
        sale_amount = float(sale.calculate_total_amount().split()[0])
        total_sales_amount += sale_amount

        if sale.payment_method == 'cash':
            total_cash_sales_amount += sale_amount
        elif sale.payment_method == 'non_cash':
            total_non_cash_sales_amount += sale_amount

        for item in sale.items.all():
            sales_by_items[item.product_modification].append(item)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    for ret in returns:
        return_amount = float(ret.calculate_total_amount().split()[0])
        total_returns_amount += return_amount

        for item in ret.items.all():
            returns_by_items[item.product_modification].append(item)

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    report_str = hbold("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –≥–æ–¥\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(sales_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    report_str += hbold("\n–í–æ–∑–≤—Ä–∞—Ç—ã –∑–∞ –≥–æ–¥\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    for product_modification, items in sorted(returns_by_items.items(), key=lambda x: x[0].custom_sku):
        report_str += f"‚û°Ô∏è {product_modification.custom_sku} ({sum(item.quantity for item in items)} —à—Ç. —Å—É–º–º–∞ {product_modification.sale_price * sum(item.quantity for item in items) if product_modification.sale_price > 0 else product_modification.price * sum(item.quantity for item in items)}–≥—Ä–Ω.)\n"

    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Å—É–º–º—ã
    report_str += (f"\n{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂')}: {total_sales_amount:.2f} UAH (–Ω–∞–ª.: {total_cash_sales_amount:.2f}"
                   f" UAH, –±–µ–∑–Ω–∞–ª.: {total_non_cash_sales_amount:.2f} UAH)\n")
    report_str += f"{hbold('–û–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')}: {total_returns_amount:.2f} UAH\n\n"
    report_str += f"{hbold('üíµ –ß–∏—Å—Ç–∞—è –∫–∞—Å—Å–∞')}: {(total_cash_sales_amount + total_non_cash_sales_amount) - total_returns_amount:.2f} UAH"

    return report_str


#  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ
@sync_to_async
def get_total_stock():
    available_modifications = ProductModification.objects.filter(stock__gt=0).order_by('custom_sku')

    report_str = "–û–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏\n\n"
    total_stock_amount = 0

    for modification in available_modifications:
        stock_quantity = modification.stock
        total_stock_amount += modification.price * stock_quantity
        amount_str = "{:.2f}".format(modification.price * stock_quantity).rstrip("0").rstrip(".")
        report_str += (
            f"‚û°Ô∏è {modification.custom_sku} "
            f"({stock_quantity} —à—Ç. —Å—É–º–º–∞ {amount_str}–≥—Ä–Ω.)\n"
        )

    total_stock_amount_str = "{:.2f}".format(total_stock_amount).rstrip("0").rstrip(".")
    report_str += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {total_stock_amount_str} UAH"

    return report_str