from aiogram import Router, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold
from asgiref.sync import sync_to_async

from deva7km.settings import BOT_TOKEN
from tg_bot.FSM.fsm import SellStates
from tg_bot.keyboards.keyboards import create_inline_kb_main_sku, create_inline_kb_modifications, \
    create_inline_kb_numbers, create_payment_type_keyboard, create_main_menu_kb, create_inline_kb_yes_no, \
    create_inline_kb_ready_cancel
from tg_bot.services.products import get_large_image_url_input_file
from tg_bot.services.sells import check_stock_status, create_sale, get_product_modification
from tg_bot.services.users import admin_access_control_decorator, get_or_create_telegram_user

router: Router = Router()
bot: Bot = Bot(token=BOT_TOKEN, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell
@router.message(Command('sell'))
@admin_access_control_decorator(access='seller')
async def command_sell_handler(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(SellStates.choosingSKU)
    kb = await create_inline_kb_main_sku(callback='sell')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=sell
@router.callback_query(lambda callback: 'sell' == callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_sell(callback: CallbackQuery, state: FSMContext):
    kb = await create_inline_kb_main_sku(callback='sell')
    await state.clear()
    await state.set_state(SellStates.choosingSKU)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=sku –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–Ω–æ–ø–∫–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(StateFilter(SellStates.choosingSKU), lambda callback: 'product_list' not in callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_sku(callback: CallbackQuery, state: FSMContext):
    if '_main_sku_sell' in callback.data:
        sku = callback.data.split("_")[0]
        await state.set_state(SellStates.choosingModification)
        await state.update_data(choosingSKU=sku)
        user_data = await state.get_data()
        if 'products_list' not in user_data:
            kb = await create_inline_kb_modifications(sku, callback='sell')
        else:
            kb = await create_inline_kb_modifications(sku, callback='sell', product_list=True)
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –º–æ–¥–µ–ª—å ‚û°Ô∏è {hbold(user_data["choosingSKU"])}\n–≤—ã–±–µ—Ä–∏—Ç–µ '
                                      f'–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é üëá', reply_markup=kb)
        await callback.answer()
    else:
        await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
        await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=modifications –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
@router.callback_query(StateFilter(SellStates.choosingModification))
@admin_access_control_decorator(access='seller')
async def process_callback_query_modifications(callback: CallbackQuery, state: FSMContext):
    if '_modification_sell' in callback.data:
        custom_sku = callback.data.split("_")[0]
        if await check_stock_status(custom_sku):
            await state.set_state(SellStates.enteringQuantity)
            await state.update_data(choosingModification=custom_sku)
            user_data = await state.get_data()
            custom_sku = user_data['choosingModification']
            thumbnail_input_file = await get_large_image_url_input_file(custom_sku)
            kb = await create_inline_kb_numbers()
            await bot.send_photo(chat_id=callback.from_user.id,
                                 photo=thumbnail_input_file,
                                 caption=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é ‚û°Ô∏è {hbold(user_data["choosingModification"])}\n'
                                         f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:', reply_markup=kb)
            await callback.answer()
        else:
            await callback.message.answer('‚õîÔ∏è –¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç!')
            await callback.answer()
    else:
        if callback.data == 'product_list':
            await process_callback_query_numbers(callback, state)
        else:
            await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
            await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=numbers –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–Ω–∞–ª" –∏–ª–∏
# "–±–µ–∑–Ω–∞–ª" –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –µ—â–µ
@router.callback_query(StateFilter(SellStates.enteringQuantity))
@admin_access_control_decorator(access='seller')
async def process_callback_query_numbers(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    modification = await get_product_modification(user_data['choosingModification'])
    stock = modification.stock
    if callback.data.isdigit():
        if stock >= int(callback.data):
            await state.set_state(SellStates.choosingPayment)
            await state.update_data(enteringQuantity=callback.data[0])
            user_data = await state.get_data()
            product_info = {
                'choosingSKU': user_data['choosingSKU'],
                'choosingModification': user_data['choosingModification'],
                'enteringQuantity': user_data['enteringQuantity'],
            }
            if 'products_list' in user_data:
                user_data['products_list'].append(product_info)
                await state.update_data(user_data)
            else:
                user_data['products_list'] = [product_info]
                await state.update_data(user_data)

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            products_text = ""
            for product in user_data['products_list']:
                custom_sku = product['choosingModification']
                quantity = product['enteringQuantity']
                products_text += f'{custom_sku} - {quantity}—à—Ç.\n'

            kb = await create_payment_type_keyboard()
            await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ‚û°Ô∏è\n\n{products_text}\n –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É '
                                          f'–∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ç–æ–≤–∞—Ä', reply_markup=kb)
            await callback.answer()
        else:
            await callback.message.answer(f'‚õîÔ∏è –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ {stock}—à—Ç. –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {callback.data}—à—Ç.')
            await callback.answer()
    else:
        if callback.data == 'product_list':
            await state.set_state(SellStates.choosingPayment)
            user_data = await state.get_data()

            products_text = ""
            for product in user_data['products_list']:
                custom_sku = product['choosingModification']
                quantity = product['enteringQuantity']
                products_text += f'{custom_sku} - {quantity}—à—Ç.\n'

            kb = await create_payment_type_keyboard()
            await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ‚û°Ô∏è\n\n{products_text}\n –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É '
                                          f'–∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ç–æ–≤–∞—Ä', reply_markup=kb)
            await callback.answer()

        else:
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
            await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –µ—â–µ –≤ –ø—Ä–æ–¥–∞–∂—É
@router.callback_query(StateFilter(SellStates.choosingPayment), lambda callback: 'add_more' == callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_more(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SellStates.choosingSKU)
    kb = await create_inline_kb_main_sku(callback='sell', product_list=True)
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤" –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª –æ–±—Ä–∞—Ç–Ω–æ –∫ —Ö–µ–Ω–¥–ª–µ—Ä—É
# process_callback_query_numbers
@router.callback_query(lambda callback: 'product_list' == callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_product_list(callback: CallbackQuery, state: FSMContext):
    await process_callback_query_numbers(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
@router.callback_query(StateFilter(SellStates.choosingPayment))
@admin_access_control_decorator(access='seller')
async def process_callback_query_finish(callback: CallbackQuery, state: FSMContext):
    await state.update_data(choosingPayment=callback.data)
    kb = await create_inline_kb_yes_no()
    await state.set_state(SellStates.enteringComment)
    await callback.message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?', reply_markup=kb)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–¥–∞" –≤ –∫–æ–Ω—Ü–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∑–≤–æ–ª—è–ª –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@router.callback_query(StateFilter(SellStates.enteringComment), lambda callback: 'yes' == callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_finish(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(StateFilter(SellStates.enteringComment), )
@admin_access_control_decorator(access='seller')
async def process_comment_input(message: Message, state: FSMContext):
    comment = message.text
    await state.update_data(comment=comment)
    await state.set_state(SellStates.finish)
    kb = await create_inline_kb_ready_cancel()
    # –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ
    await message.answer(f'–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : {comment}\n –Ω–∞–∂–º–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                         reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–µ—Ç" –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω
@router.callback_query(StateFilter(SellStates.enteringComment), lambda callback: 'no' == callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_finish_no_comment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SellStates.finish)
    await process_callback_query_finish(callback, state)


# –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Å–æ–∑–¥–∞–≤–∞–ª –ø—Ä–æ–¥–∞–∂—É –∏ –∑–∞–≤–µ—Ä—à–∞–ª FSM
@router.callback_query(StateFilter(SellStates.finish), lambda callback: 'ready' == callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_finish(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = callback.from_user.id
    user_name = callback.from_user.username
    user_first_name = callback.from_user.first_name
    user_last_name = callback.from_user.last_name
    telegram_user = await get_or_create_telegram_user(user_id, user_name, user_first_name, user_last_name)
    await state.set_state(SellStates.finish)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    products_text = ""
    for product in user_data['products_list']:
        custom_sku = product['choosingModification']
        quantity = product['enteringQuantity']
        products_text += f'{custom_sku} - {quantity}—à—Ç.\n'

    payment_types = {
        'cash': '–Ω–∞–ª–∏—á–Ω–∞—è üíµ',
        'non_cash': '–±–µ–∑–Ω–∞–ª–∏—á–Ω–∞—è üí≥',
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    sale = await create_sale(user_data, telegram_user)
    kb = await create_main_menu_kb()

    await callback.message.answer(
        f'‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É {await sync_to_async(sale.calculate_total_amount)()}–≥—Ä–Ω.\n\n'
        f'–≤—ã –ø—Ä–æ–¥–∞–ª–∏:\n{products_text}\n'
        f'—Ç–∏–ø –æ–ø–ª–∞—Ç—ã - {payment_types[user_data["choosingPayment"]]}\n'
        f'–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - {user_data["comment"] if "comment" in user_data.keys() else "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"} ',
        reply_markup=kb)
    await state.clear()
    await callback.answer()
