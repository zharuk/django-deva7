from aiogram import Router, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold
from asgiref.sync import sync_to_async

from deva7km.settings import BOT_TOKEN
from tg_bot.FSM.fsm import SellStates
from tg_bot.keyboards.keyboards import create_inline_kb_main_sku, create_inline_kb_modifications, \
    create_inline_kb_numbers, create_payment_type_keyboard, create_main_menu_kb, create_inline_kb_add_more, \
    create_inline_kb_yes_no
from tg_bot.lexicon.lexicon import LEXICON_PAYMENT_TYPE
from tg_bot.services.products import get_large_image_url_input_file
from tg_bot.services.sells import check_stock_status, create_sale, get_product_modification, get_stock
from tg_bot.services.users import admin_access_control_decorator, get_or_create_telegram_user

router: Router = Router()
bot: Bot = Bot(token=BOT_TOKEN, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell
@router.message(Command('sell'))
@admin_access_control_decorator(access='seller')
async def command_sell_handler(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(SellStates.choosingSKU)
    kb = await create_inline_kb_main_sku(callback='sell')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=sell
@router.callback_query(lambda callback: 'sell' == callback.data)
@admin_access_control_decorator(access='seller')
async def process_callback_query_sell(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(SellStates.choosingSKU)
    kb = await create_inline_kb_main_sku(callback='sell')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=sku –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–Ω–æ–ø–∫–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(StateFilter(SellStates.choosingSKU))
@admin_access_control_decorator(access='seller')
async def process_callback_query_sku(callback: CallbackQuery, state: FSMContext):
    if '_main_sku_sell' in callback.data:
        sku = callback.data.split("_")[0]
        await state.set_state(SellStates.choosingModification)
        await state.update_data(choosingSKU=sku)
        user_data = await state.get_data()
        kb = await create_inline_kb_modifications(sku, callback='sell')
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –º–æ–¥–µ–ª—å ‚û°Ô∏è {hbold(user_data["choosingSKU"])}\n–≤—ã–±–µ—Ä–∏—Ç–µ '
                                      f'–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é üëá', reply_markup=kb)
        await callback.answer()
    else:
        await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
        await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=modifications –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
@router.callback_query(StateFilter(SellStates.choosingModification))
@admin_access_control_decorator(access='seller')
async def process_callback_query_modifications(callback: CallbackQuery, state: FSMContext):
    if '_modification_sell' in callback.data:
        custom_sku = callback.data.split("_")[0]
        if await check_stock_status(custom_sku):
            await state.set_state(SellStates.enteringQuantity)
            await state.update_data(choosingModification=custom_sku)
            user_data = await state.get_data()
            stock = await get_stock(custom_sku)
            custom_sku = user_data['choosingModification']
            thumbnail_input_file = await get_large_image_url_input_file(custom_sku)
            kb = await create_inline_kb_numbers(stock)
            await bot.send_photo(chat_id=callback.from_user.id,
                                 photo=thumbnail_input_file,
                                 caption=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é ‚û°Ô∏è {hbold(user_data["choosingModification"])}\n'
                                         f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:', reply_markup=kb)
            await callback.answer()
        else:
            await callback.message.answer('‚õîÔ∏è –¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç!')
            await callback.answer()
    else:
        await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
        await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –ø—Ä–µ–¥–ª–∞–≥–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(StateFilter(SellStates.enteringQuantity),
                       lambda callback: callback.data not in ['add_more', 'finish'])
@admin_access_control_decorator(access='seller')
async def process_callback_query_quantity(callback: CallbackQuery, state: FSMContext):
    await state.update_data(enteringQuantity=callback.data)
    user_data = await state.get_data()
    product_info = {
        'choosingSKU': user_data['choosingSKU'],
        'choosingModification': user_data['choosingModification'],
        'enteringQuantity': user_data['enteringQuantity'],
    }
    if 'products_list' in user_data:
        user_data['products_list'].append(product_info)
        await state.update_data(user_data)
    else:
        user_data['products_list'] = [product_info]
        await state.update_data(user_data)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    products_text = ""
    for product in user_data['products_list']:
        custom_sku = product['choosingModification']
        quantity = product['enteringQuantity']
        products_text += f'{custom_sku} - {quantity}—à—Ç.\n'
    kb = await create_inline_kb_add_more()

    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ‚û°Ô∏è\n\n{products_text}\n –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ç–æ–≤–∞—Ä '
                                  f'–∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É', reply_markup=kb)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=add_more –¥–ª—è sell
@router.callback_query(StateFilter(SellStates.enteringQuantity), lambda callback: 'add_more' == callback.data)
@admin_access_control_decorator(access='admin')
async def process_callback_query_add_more(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SellStates.choosingSKU)
    kb = await create_inline_kb_main_sku(callback='sell')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
@router.callback_query(StateFilter(SellStates.enteringQuantity), lambda callback: 'finish' == callback.data)
@admin_access_control_decorator(access='admin')
async def process_callback_query_finish(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SellStates.choosingPayment)
    await process_callback_query_payment(callback, state)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –≤—ã–≤–æ–¥–∏–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–Ω–∞–ª" –∏–ª–∏ "–±–µ–∑–Ω–∞–ª"
@router.callback_query(StateFilter(SellStates.choosingPayment), lambda callback: callback.data not in ['cash', 'non_cash', 'yes', 'no'])
@admin_access_control_decorator(access='seller')
async def process_callback_query_payment(callback: CallbackQuery, state: FSMContext):
    kb = await create_payment_type_keyboard()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã üëá', reply_markup=kb)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞—à–∏–≤–∞–ª –±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@router.callback_query(StateFilter(SellStates.choosingPayment), lambda callback: callback.data not in ['yes', 'no'])
@admin_access_control_decorator(access='seller')
async def process_callback_query_comment(callback: CallbackQuery, state: FSMContext):
    kb = await create_inline_kb_yes_no()
    await state.update_data(choosingPayment=callback.data)
    await callback.message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?', reply_markup=kb)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ callback "yes" –∏ –≤—ã–≤–æ–¥–∏–ª "–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
@router.callback_query(StateFilter(SellStates.choosingPayment), lambda callback: callback.data == 'yes')
@admin_access_control_decorator(access='seller')
async def process_callback_query_comment_yes(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SellStates.enteringComment)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º')
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(SellStates.enteringComment))
@admin_access_control_decorator(access='seller')
async def process_message_comment(message: Message, state: FSMContext):
    await state.update_data(enteringComment=message.text)
    await state.set_state(SellStates.finish)
    user_data = await state.get_data()

    # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    telegram_user = await get_or_create_telegram_user(user_id, user_name, user_first_name, user_last_name)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    products_text = ""
    for product in user_data['products_list']:
        custom_sku = product['choosingModification']
        quantity = product['enteringQuantity']
        products_text += f'{custom_sku} - {quantity}—à—Ç.\n'

    payment = LEXICON_PAYMENT_TYPE[user_data['choosingPayment']]
    comment = user_data['enteringComment'] if 'enteringComment' in user_data else '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    try:
        sale = await create_sale(user_data, telegram_user)
    except Exception as e:
        print(e)
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ {e}')
        await state.clear()
        return

    kb = await create_main_menu_kb()

    await message.answer(
        f'‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É {hbold(await sync_to_async(sale.calculate_total_amount)())}–≥—Ä–Ω.\n\n'
        f'–≤—ã –ø—Ä–æ–¥–∞–ª–∏:\n{products_text}\n'
        f'—Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏ - {hbold(payment)}\n'
        f'–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - {hbold(comment)}\n',
        reply_markup=kb)
    await state.clear()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ callback "no" –∏ –≤—ã–≤–æ–¥–∏–ª "–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
@router.callback_query(StateFilter(SellStates.choosingPayment), lambda callback: callback.data == 'no')
@admin_access_control_decorator(access='seller')
async def process_callback_query_comment_no(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SellStates.enteringComment)
    await process_callback_query_finish_sell(callback, state)


# –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã —Å–æ–∑–¥–∞–≤–∞–ª –ø—Ä–æ–¥–∞–∂—É –∏ –æ—á–∏—â–∞–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(StateFilter(SellStates.finish))
@admin_access_control_decorator(access='seller')
async def process_callback_query_finish_sell(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = callback.from_user.id
    user_name = callback.from_user.username
    user_first_name = callback.from_user.first_name
    user_last_name = callback.from_user.last_name
    telegram_user = await get_or_create_telegram_user(user_id, user_name, user_first_name, user_last_name)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    products_text = ""
    for product in user_data['products_list']:
        custom_sku = product['choosingModification']
        quantity = product['enteringQuantity']
        products_text += f'{custom_sku} - {quantity}—à—Ç.\n'

    payment = LEXICON_PAYMENT_TYPE[user_data['choosingPayment']]
    comment = user_data['enteringComment'] if 'enteringComment' in user_data else '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    try:
        sale = await create_sale(user_data, telegram_user)
    except Exception as e:
        print(e)
        await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ {e}')
        await state.clear()
        return

    kb = await create_main_menu_kb()

    await callback.message.answer(
        f'‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É {hbold(await sync_to_async(sale.calculate_total_amount)())}–≥—Ä–Ω.\n\n'
        f'–≤—ã –ø—Ä–æ–¥–∞–ª–∏:\n{products_text}\n'
        f'—Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏ - {hbold(payment)}\n'
        f'–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - {hbold(comment)}\n',
        reply_markup=kb)
    await state.clear()
    await callback.answer()
