from aiogram import Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from tg_bot.FSM.sell import SellStates
from tg_bot.keyboards.keyboards import create_inline_kb_main_sku, create_inline_kb_modifications, \
    create_inline_kb_numbers, create_payment_type_keyboard, create_inline_kb_cancel, create_main_menu_kb
from tg_bot.services.sells import check_stock_status, create_sale, get_product_modification
from tg_bot.services.users import access_control_decorator, get_or_create_telegram_user

router: Router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell
@router.message(Command('sell'))
@access_control_decorator
async def command_sell_handler(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(SellStates.choosingSKU)
    kb = await create_inline_kb_main_sku('sell')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=sell
@router.callback_query(lambda callback: 'sell' == callback.data)
@access_control_decorator
async def process_callback_query_sell(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(SellStates.choosingSKU)
    kb = await create_inline_kb_main_sku('sell')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üëá', reply_markup=kb)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=sku –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–Ω–æ–ø–∫–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(StateFilter(SellStates.choosingSKU))
@access_control_decorator
async def process_callback_query_sku(callback: CallbackQuery, state: FSMContext):
    if '_main_sku_sell' in callback.data:
        sku = callback.data.split("_")[0]
        await state.set_state(SellStates.choosingModification)
        await state.update_data(choosingSKU=sku)
        kb = await create_inline_kb_modifications(sku, 'sell')
        await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é üëá', reply_markup=kb)
        await callback.answer()
    else:
        await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
        await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=modifications –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
@router.callback_query(StateFilter(SellStates.choosingModification))
@access_control_decorator
async def process_callback_query_modifications(callback: CallbackQuery, state: FSMContext):
    if '_modification_sell' in callback.data:
        custom_sku = callback.data.split("_")[0]
        if await check_stock_status(custom_sku):
            await state.set_state(SellStates.enteringQuantity)
            await state.update_data(choosingModification=custom_sku)
            kb = await create_inline_kb_numbers()
            await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=kb)
            await callback.answer()
        else:
            await callback.message.answer('‚õîÔ∏è –¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç!')
            await callback.answer()
    else:
        await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
        await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–ª callback_query=numbers –¥–ª—è sell –∏ –≤—ã–≤–æ–¥–∏–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–Ω–∞–ª" –∏–ª–∏
# "–±–µ–∑–Ω–∞–ª"
@router.callback_query(StateFilter(SellStates.enteringQuantity))
@access_control_decorator
async def process_callback_query_numbers(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    modification = await get_product_modification(user_data['choosingModification'])
    stock = modification.stock
    print(stock)
    print(modification)
    if callback.data.isdigit():
        if stock >= int(callback.data):
            await state.set_state(SellStates.choosingPayment)
            await state.update_data(enteringQuantity=callback.data[0])
            kb = await create_payment_type_keyboard()
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã üëá', reply_markup=kb)
            await callback.answer()
        else:
            await callback.message.answer(f'‚õîÔ∏è –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ {stock}—à—Ç. –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {callback.data}—à—Ç.')
            await callback.answer()
    else:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
        await callback.answer()


@router.callback_query(StateFilter(SellStates.choosingPayment))
@access_control_decorator
async def process_callback_query_finish(callback: CallbackQuery, state: FSMContext):
    if callback.data in ['cash', 'non_cash']:
        # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = callback.from_user.id
        user_name = callback.from_user.username
        user_first_name = callback.from_user.first_name
        user_last_name = callback.from_user.last_name
        telegram_user = await get_or_create_telegram_user(user_id, user_name, user_first_name, user_last_name)
        await state.set_state(SellStates.finish)
        await state.update_data(choosingPayment=callback.data)
        user_data = await state.get_data()
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
        sale = await create_sale(user_data, telegram_user)
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        kb = await create_main_menu_kb()
        if sale:
            await state.clear()
            payment_types = {
                'cash': '–Ω–∞–ª–∏—á–Ω–∞—è üíµ',
                'non_cash': '–±–µ–∑–Ω–∞–ª–∏—á–Ω–∞—è üí≥',
            }
            await callback.message.answer(f'‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É {sale.total_amount}\n\n'
                                          f'–≤—ã –ø—Ä–æ–¥–∞–ª–∏ {user_data["choosingModification"]}\n'
                                          f'–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {user_data["enteringQuantity"]}—à—Ç.\n'
                                          f'—Ç–∏–ø –æ–ø–ª–∞—Ç—ã - {payment_types[user_data["choosingPayment"]]}', reply_markup=kb)
            await callback.answer()
        else:
            await callback.message.answer('‚õîÔ∏è ProductModification –Ω–µ –Ω–∞–π–¥–µ–Ω')
    else:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞! üëÜ')
