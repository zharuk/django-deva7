from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from catalog.models import Product, ProductModification


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def create_main_menu_kb():
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    products_button = InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='products')
    sell_button = InlineKeyboardButton(text='üí∏ –ü—Ä–æ–¥–∞—Ç—å', callback_data='sell')
    return_button = InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å', callback_data='return')
    inventory_button = InlineKeyboardButton(text='üìà –û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–µ', callback_data='inventory')
    write_off_button = InlineKeyboardButton(text='üìâ –°–ø–∏—Å–∞–Ω–∏–µ', callback_data='write_off')
    report_button = InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='report')
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    inline_keyboard = [[products_button], [sell_button], [return_button], [inventory_button], [write_off_button],
                       [report_button]]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def create_inline_kb_main_sku(callback, page=1):
    def custom_sort_key(sku):
        # –í–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        numeric_part = ''.join(filter(str.isdigit, sku))
        return int(numeric_part) if numeric_part else float('inf')

    products = await sync_to_async(list)(Product.objects.all())
    products = sorted(products, key=lambda x: custom_sort_key(x.sku), reverse=True)

    buttons = []

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8)
    buttons_per_page = 49
    start_index = (page - 1) * buttons_per_page
    end_index = start_index + buttons_per_page

    for product in products[start_index:end_index]:
        sku = product.sku
        buttons.append(InlineKeyboardButton(text=sku, callback_data=f'{sku}_main_sku_{callback}_{page}'))

    # –ó–∞–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É (–∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 2)
    buttons_per_row = 7
    rows = [buttons[i:i + buttons_per_row] for i in range(0, len(buttons), buttons_per_row)]

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –±–æ–ª—å—à–µ 1
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prev_{callback}_{page}'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if len(products) > end_index:
        navigation_buttons.append(InlineKeyboardButton(text='‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥', callback_data=f'next_{callback}_{page}'))

    rows.append(navigation_buttons)
    rows.append([InlineKeyboardButton(text='‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', callback_data='cancel')])

    return InlineKeyboardMarkup(inline_keyboard=rows)


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' c callback data 'products'
async def create_inline_kb_return(callback):
    button = [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=callback)]
    return InlineKeyboardMarkup(inline_keyboard=[button])


#  –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
async def create_inline_kb_modifications(main_sku, callback):
    product_modifications = await sync_to_async(list)(ProductModification.objects.filter(product__sku=main_sku))
    buttons = []

    for modification in product_modifications:
        custom_sku = modification.custom_sku
        stock = modification.stock
        buttons.append(InlineKeyboardButton(text=f'{custom_sku} ({stock} —à—Ç.)',
                                            callback_data=f'{custom_sku}_modification_{callback}'))

    buttons_per_row = 2
    rows = [buttons[i:i + buttons_per_row] for i in range(0, len(buttons), buttons_per_row)]
    rows.append([InlineKeyboardButton(text='‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='cancel')])

    return InlineKeyboardMarkup(inline_keyboard=rows)


async def create_inline_kb_numbers(quantity=10):
    buttons = []

    for number in range(1, quantity + 1):
        buttons.append(InlineKeyboardButton(text=str(number), callback_data=f'{number}'))

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä—è–¥—ã –ø–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–º
    rows = [buttons[i:i + 5] for i in range(0, len(buttons), 5)]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'
    rows.append([InlineKeyboardButton(text='‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='cancel')])

    return InlineKeyboardMarkup(inline_keyboard=rows)


async def create_payment_type_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ª–∏—á–Ω–æ–π –∏ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    cash_button = InlineKeyboardButton(text='–ù–∞–ª–∏—á–Ω–∞—è', callback_data=f'cash')
    non_cash_button = InlineKeyboardButton(text='–ë–µ–∑–Ω–∞–ª–∏—á–Ω–∞—è', callback_data=f'non_cash')

    # –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    row = [cash_button, non_cash_button]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [row, [InlineKeyboardButton(text='‚ôæÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä', callback_data='add_more')],
                [InlineKeyboardButton(text='‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='cancel')]]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def create_inline_kb_cancel():
    button = InlineKeyboardButton(text='‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='cancel')
    return InlineKeyboardMarkup(inline_keyboard=[[button]])


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è reports –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞–º –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –∫–Ω–æ–ø–æ–∫ "–æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
# "–æ—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞", "–æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", "–æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", "–æ—Ç—á–µ—Ç –∑–∞ –≥–æ–¥"
async def create_report_kb():
    today_button = InlineKeyboardButton(text='–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today')
    yesterday_button = InlineKeyboardButton(text='–û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞', callback_data='yesterday')
    week_button = InlineKeyboardButton(text='–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é', callback_data='week')
    month_button = InlineKeyboardButton(text='–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü', callback_data='month')
    year_button = InlineKeyboardButton(text='–û—Ç—á–µ—Ç –∑–∞ –≥–æ–¥', callback_data='year')
    total_stock = InlineKeyboardButton(text='üìë –û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º', callback_data='total_stock')
    cancel_button = InlineKeyboardButton(text='‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='cancel')
    return InlineKeyboardMarkup(
        inline_keyboard=[[today_button, yesterday_button], [week_button, month_button], [year_button], [total_stock],
                         [cancel_button]])
